/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech) (6.6.0).
 * https://openapi-generator.tech
 * Do not edit the class manually.
*/
package com.bucketbingo.api.adapter.`in`.rest.operations

import com.bucketbingo.api.adapter.`in`.rest.models.BingoBoard
import com.bucketbingo.api.adapter.`in`.rest.models.CreateBoardRequest
import com.bucketbingo.api.adapter.`in`.rest.models.ListBoards200Response
import com.bucketbingo.api.adapter.`in`.rest.models.PutBoardRequest
import com.bucketbingo.api.adapter.`in`.rest.models.UpdateSquareRequest
import org.springframework.http.HttpStatus
import org.springframework.http.MediaType
import org.springframework.http.ResponseEntity

import org.springframework.web.bind.annotation.*
import org.springframework.validation.annotation.Validated
import org.springframework.web.context.request.NativeWebRequest
import org.springframework.beans.factory.annotation.Autowired

import jakarta.validation.constraints.DecimalMax
import jakarta.validation.constraints.DecimalMin
import jakarta.validation.constraints.Email
import jakarta.validation.constraints.Max
import jakarta.validation.constraints.Min
import jakarta.validation.constraints.NotNull
import jakarta.validation.constraints.Pattern
import jakarta.validation.constraints.Size
import jakarta.validation.Valid

import kotlin.collections.List
import kotlin.collections.Map

@Validated
@RequestMapping("\${api.base-path:}")
interface BucketBingoApi {


    @RequestMapping(
            method = [RequestMethod.POST],
            value = ["/boards"],
            consumes = ["application/json"]
    )
    fun createBoard( @RequestHeader(value = "authorization", required = false) authorization: kotlin.String?, @Valid @RequestBody(required = false) createBoardRequest: CreateBoardRequest?): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @RequestMapping(
            method = [RequestMethod.DELETE],
            value = ["/boards/{boardId}"]
    )
    fun deleteBoard( @PathVariable("boardId") boardId: kotlin.String, @RequestHeader(value = "authorization", required = false) authorization: kotlin.String?): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/boards/{boardId}"],
            produces = ["application/json"]
    )
    fun getBoard( @PathVariable("boardId") boardId: kotlin.String, @RequestHeader(value = "authorization", required = false) authorization: kotlin.String?): ResponseEntity<BingoBoard> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @RequestMapping(
            method = [RequestMethod.GET],
            value = ["/boards"],
            produces = ["application/json"]
    )
    fun listBoards( @RequestHeader(value = "authorization", required = false) authorization: kotlin.String?,@Min(1) @Valid @RequestParam(value = "pageSize", required = false, defaultValue = "12") pageSize: kotlin.Int,@Min(0) @Valid @RequestParam(value = "pageOffset", required = false, defaultValue = "0") pageOffset: kotlin.Int): ResponseEntity<ListBoards200Response> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @RequestMapping(
            method = [RequestMethod.PUT],
            value = ["/boards/{boardId}"],
            consumes = ["application/json"]
    )
    fun putBoard( @PathVariable("boardId") boardId: kotlin.String, @RequestHeader(value = "authorization", required = false) authorization: kotlin.String?, @Valid @RequestBody(required = false) putBoardRequest: PutBoardRequest?): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @RequestMapping(
            method = [RequestMethod.PATCH],
            value = ["/boards/{boardId}/start"]
    )
    fun startBingo( @PathVariable("boardId") boardId: kotlin.String, @RequestHeader(value = "authorization", required = false) authorization: kotlin.String?): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }


    @RequestMapping(
            method = [RequestMethod.PATCH],
            value = ["/boards/{boardId}/squares/{squareId}"],
            consumes = ["application/json"]
    )
    fun updateSquare( @PathVariable("boardId") boardId: kotlin.String, @PathVariable("squareId") squareId: kotlin.Int, @RequestHeader(value = "authorization", required = false) authorization: kotlin.String?, @Valid @RequestBody(required = false) updateSquareRequest: UpdateSquareRequest?): ResponseEntity<Unit> {
        return ResponseEntity(HttpStatus.NOT_IMPLEMENTED)
    }
}
